Eloquent模型文档:https://laravel-china.org/docs/laravel/5.5/eloquent

Tinker 是一个 REPL (read-eval-print-loop)，REPL 指的是一个简单的、可交互式的编程环境，通过执行用户输入的命令，
并将执行结果直接打印到命令行界面上来完成整个操作。REPL 对于学习一门新的编程语言具有很大的帮助，
因为它能立刻对初学者做出的动作进行响应。接下来我们将使用 Tinker 来操作用户对象。

首先让我们使用此命令进入 Tinker 环境：

$ php artisan tinker
如果中途想要退出 Tinker，可使用 ctrl + c 快捷键。

通过下面命令我们可以很轻松的创建一个用户对象：

>>> App\Models\User::create(['name'=> 'Aufree', 'email'=>'aufree@yousails.com','password'=>bcrypt('password')])
在以上命令中，我们使用 App\Models\User Eloquent 模型提供的 create 方法，通过传入一个关联数组来新建一个用户对象。
在我们对用户的 password 进行赋值时，调用了一个叫 bcrypt 的方法，将 password 的值进行加密。
这是因为所有保存到数据库的用户密码在经过加密保存后安全性更高，这样当我们的数据库不幸被黑客脱库时，
泄露出去的用户密码也都是有经过加密处理的。在读取用户密码的时候，
Laravel 会先对密码进行解密再返回，这块的具体操作逻辑我们不必太担心，因为 Laravel 已为我们做好了一切防范措施。


在前面的章节中我们学过，当使用了 use 对类进行引用之后，便可以对类进行直接调用。为了让接下来的命令可读性更高，
我们使用 use 来引用 App\Models\User Eloquent 模型类：

>>> use App\Models\User
这样我们就可以在后面的操作中直接调用 User 而不是完整的类名 App\Models\User。

注意：上面的 use 引用命令只会对当前会话有效，如果中途退出了 Tinker 的话，需要重新再执行一次上面的命令，才能继续使用 User 类名缩写。

使用 Eloquent 模型，能让我们更加轻松的与数据库进行交互。当我们要查找一个 id 为 1 的用户时，可以使用下面这种方法：

>>> User::find(1)
当你传给 find 方法的 id 不存在时，Tinker 将会返回 null：

>>> User::find(5)
=> null
如果你想在查询用户不存在时触发报错的话，可使用 findOrFail：

>>> User::findOrFail(5)
Illuminate\Database\Eloquent\ModelNotFoundException with message 'No query results for model [App\Models\User] 5'
如果要查找用户表中的首个用户，可以使用 first 方法：

>>> User::first()
我们还可以用 all 方法取出所有的用户数据：

>>> User::all()

更新用户对象
在用户创建成功之后，我们还可以对用户信息进行更新。有两种方式可以完成用户的更新操作：

第一种是通过给用户对象属性进行赋值，赋值成功后再调用 save 方法进行保存更新；
第二种则是直接调用 update 方法进行更新。
一般较为常用的是第二种更新方式。

让我们以刚刚新建的用户对象为例，对用户名进行更新。

首先，让我们将用户对象从数据库中取出，并赋值给 user 变量。

>>> $user = User::first()
通过 save 方法更新
让我们使用属性赋值更新的方法对用户名进行更新，将其名字更改为 Summer：

>>> $user->name = 'Summer'
这时，新的用户名已赋值成功，但是 尚未 保存到数据库，因此查看用户信息时我们能够看到，用户名显示的还是之前的 Aufree。

>>> User::first()
=> App\Models\User {#687
     id: 1,
     name: "Aufree",
     email: "aufree@yousails.com",
     created_at: "2016-09-11 08:53:33",
     updated_at: "2016-09-11 08:53:33",
   }
让我们来调用 save 方法对用户信息进行保存。

>>> $user->save()
这时再次对用户信息进行查询，我们能看到用户名已成功更改。

>>> User::first()
=> App\Models\User {#687
     id: 1,
     name: "Summer",
     email: "aufree@yousails.com",
     created_at: "2016-09-11 08:53:33",
     updated_at: "2016-09-11 08:57:33",
   }
通过 update 方法更新
下面让我们再来使用 update 方法将用户名更改回 Aufree：

>>> $user->update(['name'=>'Aufree'])
再次查询用户信息，可看到改动成功。

>>> User::first()
=> App\Models\User {#685
     id: 1,
     name: "Aufree",
     email: "aufree@yousails.com",
     created_at: "2016-09-11 08:53:33",
     updated_at: "2016-09-11 08:58:01",
   }
