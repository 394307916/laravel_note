在 Laravel 中，我们使用 数据库迁移 来管理数据库表结构，迁移就像是数据库中的版本控制，
它让团队成员之间能够轻松的修改跟共享应用程序的数据库结构，而不用担心并行更新数据结构而造成冲突等问题。
同时也让 Laravel 项目的部署变得很方便。不仅如此，Migration 建表要比直接手动创建表或者 .sql 文件具备额外的管理数据库的功能，
如：回滚/重置/更新等。Migration 的建表方法大部分情况下能兼容 MySQL, PostgreSQL, SQLite 甚至是 Oracle 等主流数据库系统。



所有创建的迁移文件都被统一放在 database/migrations 文件夹里。打开该文件夹我们可以看到，Laravel 已默认为我们创建好了两个迁移文件：

database/migrations/2014_10_12_000000_create_users_table.php
database/migrations/2014_10_12_100000_create_password_resets_table.php
从上面迁移文件的命名可以看出，Laravel 在创建迁移文件时会默认在生成的文件名前面加上一个当前时间戳，用于指明该文件的创建时间。加上时间戳来命名迁移文件的好处在于，当我们进行团队协作开发时，如果有多个成员生成了相同名字的迁移文件，也不会出现文件冲突的问题，除非这几个成员都在同一时间生成了相同名称的迁移文件，不过这种概率太低了，基本可以忽略不计。

Laravel 默认创建的两个迁移文件，一个用于构建用户表，一个用于构建密码重置表。
密码重置的功能我们在后面章节再进行讲解，本章我们先来看下 Laravel 为我们生成的创建用户迁移文件里面都包含了什么内容。

database/migrations/2014_10_12_000000_create_users_table.php

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateUsersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('email')->unique();
            $table->string('password', 60);
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('users');
    }
}

可以看到在该文件里面定义了一个 CreateUsersTable 类，并继承自 Migration 基类。CreateUsersTable 有两个方法 up 和 down ：

当我们运行迁移时，up 方法会被调用；
当我们回滚迁移时，down 方法会被调用。
在 up 方法里面，我们通过调用 Schema 类的 create 方法来创建 users 表
create 方法会接收两个参数：一个是数据表的名称，另一个则是接收 $table（Blueprint 实例）的闭包。


$table->increments('id');
由 increments 方法创建了一个 integer 类型的自增长 id。

$table->string('name');
由 string 方法创建了一个 name 字段，用于保存用户名称。

$table->string('email')->unique();
由 string 方法创建了一个 email 字段，且在最后指定该字段的值为唯一值，用于保存用户邮箱。

$table->string('password', 60);
由 string 方法创建了一个 password 字段，且在 string 方法中指定保存的值最大长度为 60，用于保存用户密码。

$table->rememberToken();
由 rememberToken 方法为用户创建一个 remember_token 字段，用于保存『记住我』的相关信息。

$table->timestamps();
由 timestamps 方法创建了一个 created_at 和一个 updated_at 字段，分别用于保存用户的创建时间和更新时间。
----------------------------------------------------------------------------------------------------------------------------------
我们需要生成一个迁移文件来为用户表新增管理员字段。在生成迁移文件时，带上 --table 选项可以为指定数据表生成迁移文件。
现在，让我们运行下面命令来为用户表新增管理员字段。

$ php artisan make:migration add_is_admin_to_users_table --table=users
我们需要在新建的迁移文件中为用户添加一个 is_admin 的布尔值类型字段来判别用户是否拥有管理员身份，
该字段默认为 false，在迁移文件执行时对该字段进行创建，回滚时则需要对该字段进行移除。迁移文件最终编写完成的代码如下。

database/migrations/[timestamp]_add_is_admin_to_users_table.php

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class AddIsAdminToUsersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->boolean('is_admin')->default(false);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn('is_admin');
        });
    }
}
