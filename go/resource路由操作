Laravel 遵从 RESTful 架构的设计原则，将数据看做一个资源，由 URI 来指定资源。
对资源进行的获取、创建、修改和删除操作，分别对应 HTTP 协议提供的 GET、POST、PATCH 和 DELETE 方法。
当我们要查看一个 id 为 1 的用户时，需要向 /users/1 地址发送一个 GET 请求，当 Laravel 的路由接收到该请求时，
默认会把该请求传给控制器的 show 方法进行处理。

Laravel 为我们提供了 resource 方法来定义用户资源路由。

routes/web.php

<?php

Route::get('/', 'StaticPagesController@home')->name('home');
Route::get('/help', 'StaticPagesController@help')->name('help');
Route::get('/about', 'StaticPagesController@about')->name('about');

Route::get('signup', 'UsersController@create')->name('signup');
Route::resource('users', 'UsersController');
新增的 resource 方法将遵从 RESTful 架构为用户资源生成路由。该方法接收两个参数，第一个参数为资源名称，第二个参数为控制器名称。

Route::resource('users', 'UsersController');
上面代码将等同于：

Route::get('/users', 'UsersController@index')->name('users.index');
Route::get('/users/{user}', 'UsersController@show')->name('users.show');
Route::get('/users/create', 'UsersController@create')->name('users.create');
Route::post('/users', 'UsersController@store')->name('users.store');
Route::get('/users/{user}/edit', 'UsersController@edit')->name('users.edit');
Route::patch('/users/{user}', 'UsersController@update')->name('users.update');
Route::delete('/users/{user}', 'UsersController@destroy')->name('users.destroy');
可以看到使用 resource 方法让我们少写了很多代码，且严格按照了 RESTful 架构对路由进行设计。

生成的资源路由列表信息如下所示：

HTTP 请求	URL	动作	作用
GET	/users	UsersController@index	显示所有用户列表的页面
GET	/users/{user}	UsersController@show	显示用户个人信息的页面
GET	/users/create	UsersController@create	创建用户的页面
POST	/users	UsersController@store	创建用户
GET	/users/{user}/edit	UsersController@edit	编辑用户个人资料的页面
PATCH	/users/{user}	UsersController@update	更新用户
DELETE	/users/{user}	UsersController@destroy	删除用户


UsersController 的 show 方法定义如下。

app/Http/Controllers/UsersController.php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Requests;
use App\Models\User;

class UsersController extends Controller
{
    public function create()
    {
        return view('users.create');
    }

    public function show(User $user)
    {
        return view('users.show', compact('user'));
    }
}
Laravel 会自动解析定义在控制器方法（变量名匹配路由片段）中的 Eloquent 模型类型声明。
在上面代码中，由于 show() 方法传参时声明了类型 —— Eloquent 模型 User，
对应的变量名 $user 会匹配路由片段中的 {user}，这样，Laravel 会自动注入与请求 URI 中传入的 ID 对应的用户模型实例。

此功能称为 『隐性路由模型绑定』，是『约定优于配置』设计范式的体现，同时满足以下两种情况，此功能即会自动启用：

路由声明时必须使用 Eloquent 模型的单数小写格式来作为路由片段参数，User 对应 {user}：
Route::get('/users/{user}', 'UsersController@show')->name('users.show');
在使用资源路由 Route::resource('users', 'UsersController'); 时，默认已经包含了上面的声明。

控制器方法传参中必须包含对应的 Eloquent 模型类型声明，并且是有序的：
public function show(User $user)
{
    return view('users.show', compact('user'));
}
当请求 http://sample.test/users/1 并且满足以上两个条件时，Laravel 将会自动查找 ID 为 1 的用户并赋值到变量 $user 中，
如果数据库中找不到对应的模型实例，会自动生成 HTTP 404 响应。

return view('users.show', compact('user'));
我们将用户对象 $user 通过 compact 方法转化为一个关联数组，并作为第二个参数传递给 view 方法，将数据与视图进行绑定。

下面让我们来新建一个用户个人页面。

resources/views/users/show.blade.php

@extends('layouts.default')
@section('title', $user->name)
@section('content')
{{ $user->name }} - {{ $user->email }}
@stop
由于我们使用了 view('users.show', compact('user')) 将用户数据与视图进行绑定，因此在视图中可以直接使用 $user 来访问用户实例。

这时候我们再访问用户个人页面，便能够看到基本的数据展示。
