1.首先让我们使用 Git 来新建一个 static-pages 分支。
$ git checkout master
$ git checkout -b static-pages

上面的第一条命令 git checkout master 代表将当前分支切换到 master 分支上，
master 分支是我们初始化 Git 时默认创建的主分支，其它分支都是基于主分支衍生出来的。

第二条命令 git checkout -b static-pages 将会为你创建一个名为 static-pages 的新分支。-b 选项表示创建指定名称的新分支。

合并分支示例：
$ git merge fake-branch

Laravel 默认会为我们生成一个 welcome.blade.php 视图文件，
主要用于对默认页面进行渲染，这个文件对我们接下来的项目开发没有一点用处，因此我们可将其移除：
$ rm resources/views/welcome.blade.php


2.配置路由
routes/web.php

<?php

Route::get('/', 'StaticPagesController@home');
Route::get('/help', 'StaticPagesController@help');
Route::get('/about', 'StaticPagesController@about');
我们为 get 方法传递了两个参数，第一个参数指明了 URL，第二个参数指明了处理该 URL 的控制器动作。
get 表明这个路由将会响应 GET 请求，并将请求映射到指定的控制器动作上。比方说，我们向 http://sample.test/ 发出了一个请求，
则该请求将会由 StaticPagesController 的 home 方法进行处理。我们将在下节创建 StaticPagesController，为你讲解控制器在收到请求后如何进行相关操作。

GET 常用于页面读取
POST 常用于数据提交
PATCH 常用于数据更新
DELETE 常用于数据删除

3.生成静态页面控制器
$ php artisan make:controller StaticPagesController

app/Http/Controllers/StaticPagesController.php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class StaticPagesController extends Controller
{
    //
}

用 use 来引用在 PHP 文件中要使用的类，引用之后便可以对其进行调用。

3.添加静态页面视图
app/Http/Controllers/StaticPagesController.php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class StaticPagesController extends Controller
{
    public function home()
    {
        return view('static_pages/home');
    }

    public function help()
    {
        return view('static_pages/help');
    }

    public function about()
    {
        return view('static_pages/about');
    }
}

下面这行代码，将会渲染在 resources/views 文件夹下的 static_pages/home.blade.php 文件。
默认情况下，所有的视图文件都存放在 resources/views 文件夹下。
return view('static_pages/home');


4.局部视图
首先，我们需要新建一个头部视图文件。
resources/views/layouts/_header.blade.php

我们在头部视图的文件名前面加了下划线 _

现在让我们再来为应用创建一个底部视图，用于置放网站的一些基础信息。
resources/views/layouts/_footer.blade.php

在完成头部视图和底部视图的定义后，接下来便可以在 default 视图中引用这两个视图。
resources/views/layouts/default.blade.php
<!DOCTYPE html>
<html>
  <head>
    <title>@yield('title', 'Sample App') - Laravel 入门教程</title>
    <link rel="stylesheet" href="/css/app.css">
  </head>
  <body>
    @include('layouts._header')

    <div class="container">
      <div class="col-md-offset-1 col-md-10">
        @yield('content')
        @include('layouts._footer')
      </div>
    </div>
  </body>
</html>

@include 是 Blade 提供的视图引用方法，可通过传参一个具体的文件路径名称来引用视图。

5.Laravel 路由
我们在前面讲到，如果要使用下面这种方式来渲染 help 链接，则需要先为路由定义 help 路由名称。

<li><a href="{{ route('help') }}">帮助</a></li>
在 Laravel 中，我们可以通过在路由后面链式调用 name 方法来为路由指定名称：

Route::get('/help', 'StaticPagesController@help')->name('help');
当我们在页面渲染该路由时，route('help') 最终的渲染结果将如下：

http://sample.test/help
可以看到 route('help') 为我们生成了完整的 URL 地址，这样当我们需要对生成的 URL 进行更改时，我们只需要改动路由文件即可，由此可见在实际开发中养成对路由的命名是一个好习惯，可以帮助我们节省很多工作量，另外也是 Laravel 项目开发的最佳实践。

这里举一个例子来说明：假如我们的应用中有 10 个地方使用 route('help') 方式书写这个 URL 地址，因为特殊原因，需要将 http://sample.test/help 修改为 http://sample.test/faq ，这时候，你只需要修改路由定义为以下即可：

Route::get('/faq', 'StaticPagesController@help')->name('help');
这样子不需要修改到其他代码。作为比较，如果不使用 route('help') 方式，而是直接在代码中写入 http://sample.test/help ，那你只能一个个的去手工修改。
