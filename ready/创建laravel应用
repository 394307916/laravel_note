1.开启 Homestead 虚拟机：
> cd ~/Homestead && vagrant up
> vagrant ssh

2.新建一个名为 Laravel 的项目：
$ cd ~/Code
$ composer create-project laravel/laravel Laravel --prefer-dist "5.5.*"

完成之后，访问 http://homestead.test

注：建议使用 composer create-project 命令来进行创建 Laravel 项目，这样能利用 Composer 的本地缓存功能和 Composer 中文镜像 
来达到下载速度最优，尤其是后续的项目创建。

表 1.1：Laravel 文件夹结构简介
文件夹名称	简介
app	应用程序的业务逻辑代码存放文件夹
app/Console	存放自定义 Artisan 命令文件
app/Http/Controllers	存放控制器文件
app/Http/Middleware	存放「中间件」文件
bootstrap	框架启动与自动加载设置相关的文件
composer.json	应用依赖的扩展包
composer.lock	扩展包列表，确保这个应用的副本使用相同版本的扩展包
config	应用程序的配置文件
database	数据库操作相关文件（数据库迁移和数据填充）
node_modules	存放 NPM 依赖模块
package.json	应用所需的 NPM 包配置文件
phpunit.xml	测试工具 PHPUnit 的配置文件
public	前端控制器和资源相关文件（图片、JavaScript、CSS）
readme.md	项目介绍说明文件
resources	应用资源
resources/assets	未编译的应用资源文件（图片、JavaScript、CSS）
resources/lang	多语言文件
resources/views	视图文件
routes/api.php	用于定义 API 类型的路由
routes/channels.php	事件转播注册信息
routes/console.php	用于定义 Artisan 命令
routes/web.php	用于定义 Web 类型的路由（重点，大部分情况下本书会用到）
server.php	使用 PHP 内置服务器时的 URL 重写（类似于 Apache 的 "mod_rewrite" ）
storage	编译后的视图、基于会话、文件缓存和其它框架生成的文件
storage/app	目录可用于存储应用程序使用的任何文件
storage/framework	目录被用于保存框架生成的文件及缓存
storage/logs	应用程序的日志文件
tests	应用测试相关文件
vendor	Composer 依赖模块
webpack.mix.js	Laravel 的前端工作流配置文件
yarn.lock	Yarn 依赖版本锁定文件
.gitignore	被 Git 所忽略的文件
.env	环境变量配置文件

3.Composer 是一款跨平台的 PHP 依赖管理工具，其创作灵感来源于 Node.js 的 NPM 与 Ruby 的 Bundler。Laravel 使用 Composer 来作为扩展包的管理工具
。你可以利用 Composer 结合 其它开源扩展包 来达到快速建站的目的。打开 composer.json 文件，可以看到 Laravel 默认集成了一些为框架提供支持的扩展包。
Composer 是一个伟大的发明，他让组件式编程成为可能，编写软件时，就如拼接乐高玩具一样。极大的提高了开发的效率和代码的可复用性，解放了生产力。
composer.json：
{
    "name": "laravel/laravel",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "type": "project",
    "require": {
        "php": ">=7.0.0",
        "fideloper/proxy": "~3.3",
        "laravel/framework": "5.5.*",
        "laravel/tinker": "~1.0",
        "predis/predis": "^1.1"
    },
    "require-dev": {
        "fzaninotto/faker": "~1.4",
        "mockery/mockery": "0.9.*",
        "phpunit/phpunit": "~6.0"
    },
    "autoload": {
        "classmap": [
            "database"
        ],
        "psr-4": {
            "App\\": "app/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "extra": {
        "laravel": {
            "dont-discover": [
            ]
        }
    },
    "scripts": {
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate"
        ],
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover"
        ]
    },
    "config": {
        "preferred-install": "dist",
        "sort-packages": true,
        "optimize-autoloader": true
    },
    "minimum-stability": "dev",
    "prefer-stable": true
}

该文件使用 JSON 格式编写，require 键对应的是应用在 Laravel 所有环境上的扩展包，require-dev 键对应的是应用在 Laravel 开发环境上的扩展包。

在添加扩展包到 composer.json 时，需要为扩展包指定版本号才能进行安装。
我们从 composer.json 文件中可以看到有以下这三种方式来为扩展包来指定版本范围。

第一种如下所示：

"php": ">=7.0.0",
这行代码表示安装版本号大于或等于 7.0.0 版本的 PHP。

第二种是：

"laravel/framework": "5.5.*"
这行代码表示安装在 5.5.0 以上，5.6.0 以下的最新 Laravel 框架，它有可能是 5.5.0 甚至是 5.5.9。

第三种是：

"fzaninotto/faker": "~1.4",
这行代码表示安装版本号大于 1.4 但小于 2.0 的 faker。


第一行 Laravel 代码
现在让我们来写下第一行 Laravel 代码，在页面上加入一些带有我们个人身份信息的内容。

Laravel 在项目创建时会自动为我们生成一个 welcome.blade.php 文件，
这个文件将被用于渲染 Laravel 的默认视图。现在，让我们打开该文件，复制替换为以下内容，并加入你自己的一些个人信息。

resources/views/welcome.blade.php

<!DOCTYPE html>
<html>
    <head>
        <title>Laravel</title>

        <link href="https://fonts.googleapis.com/css?family=Lato:100" rel="stylesheet" type="text/css">

        <style>
            html, body {
                height: 100%;
            }

            body {
                margin: 0;
                padding: 0;
                width: 100%;
                display: table;
                font-weight: 100;
                font-family: 'Lato';
            }

            .container {
                text-align: center;
                display: table-cell;
                vertical-align: middle;
            }

            .content {
                text-align: center;
                display: inline-block;
            }

            .title {
                font-size: 66px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="content">
                <div class="title">Hello Laravel! - by Summer</div>
            </div>
        </div>
    </body>
</html>

接着让我们重新打开 http://homestead.test 页面，可看到我们的个人信息已经成功显示在页面上。
------------------------------------------------------------------------------------------------------------------------------
$ cd ~/Code
$ composer create-project laravel/laravel sample --prefer-dist "5.5.*"

修改 hosts
每个 Laravel 项目创建完成后的第一步，即是对 Homestead 进行配置，让应用能在 Homestead 的开发环境上跑起来。

为了方便记忆，一般我们都会将 IP 映射为域名，我们能够通过设置 hosts 文件来指定 IP 与域名之间的映射关系，
由于我们在 Homestead 上默认使用 192.168.10.10 来作为虚拟机的 IP 的地址，因此我们需要在系统的 hosts 文件中将域名指向该 IP 上。

Mac 下打开 Hosts 文件：

> subl /etc/hosts
Windows 下打开 Hosts 文件：

> subl C:/Windows/System32/Drivers/etc/hosts
Windows 下，如果你没有集成 subl 命令的话， 请使用编辑器直接打开文件，文件路径在 C:\Windows\System32\Drivers\etc\hosts 。

文件成功打开后，在 hosts 文件最后面新增下面一行以完成设置：

192.168.10.10   sample.test
新增站点
运行下面命令打开 Homestead.yaml 文件：

> subl ~/Homestead/Homestead.yaml
在 Homestead.yaml 文件中新增 sample 应用的 sites 和 databases 的相关设置：

---
ip: "192.168.10.10"
memory: 2048
cpus: 1
provider: virtualbox

authorize: ~/.ssh/id_rsa.pub

keys:
    - ~/.ssh/id_rsa

folders:
    - map: ~/Code
      to: /home/vagrant/Code

sites:
    - map: homestead.test
      to: /home/vagrant/Code/Laravel/public
    - map: sample.test # <--- 这里
      to: /home/vagrant/Code/sample/public # <--- 这里

databases:
    - homestead
    - sample # <--- 这里

variables:
    - key: APP_ENV
      value: local

# blackfire:
#     - id: foo
#       token: bar
#       client-id: foo
#       client-token: bar

# ports:
#     - send: 93000
#       to: 9300
#     - send: 7777
#       to: 777
#       protocol: udp
我们主要设置了 sites 和 databases 两项。 sites 会将域名 sample.test 映射到虚拟机的 /home/vagrant/Code/sample/public 文件夹上，
而 databases 则为新创建的项目指定数据库名。

重启虚拟机
在我们每次对 Homestead.yaml 文件进行了更改之后，都需要运行下面命令来使其更改生效：

> cd ~/Homestead && vagrant provision && vagrant reload

vagrant provision 是命令 Vagrant 重新加载 Homestead.yaml 配置；
vagrant reload 是重启虚拟机使更改生效。

.env 文件
接下来，我们还需要对应用根目录下的 .env 文件进行设置，为应用指定数据库名称 sample。

.env

.
.
.
DB_DATABASE=sample
.
.
.
在 .env 文件中，除了 DB_DATABASE 之外还有其它的设置信息，接下来让我们对里面的几项配置信息进行简单讲解。

一般来说，在进行实际应用的开发过程中，应用会拥有不同的运行环境，通常会有以下环境：

本地开发环境
测试环境
生产环境
在不同环境中，我们可能会使用不同的数据库或邮件发送驱动等配置，
这时候则需要通过 .env 文件来针对不同的运行环境作不同的设置。比如上面我们所编辑的 .env 文件配置将应用在本地的开发环境（local）上。

.env 支持对应用的进行简单配置，比如你可以通过 APP_ENV 来设定当前应用的运行环境，
使用 APP_DEBUG 来设定是否在应用报错时显示调试信息，使用 APP_KEY 来生成应用的密钥用于加密一些较为敏感的数据。

APP_ENV=local
APP_DEBUG=true
APP_KEY=your_app_key
我们也可以对数据库的连接方式、数据库名、用户名密码等做相关配置：

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_DATABASE=sample
DB_USERNAME=homestead
DB_PASSWORD=secret
缓存、会话、队列等驱动的相关配置信息：

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync
Redis 相关的配置信息：

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379
邮件相关的配置信息：

MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
在完成对 .env 文件的设置后，我们便可以通过传参给 getenv 方法来获取到 .env 文件中指定的值，如调用 getenv('APP_ENV') 将返回 local。
