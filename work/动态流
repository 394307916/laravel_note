动态流
接下来让我们完成本教程演示应用的最后一个功能 - 在主页上显示所有关注用户的微博动态。

我们在前面章节中已经为用户定义了 Feed 动态流方法，只是该方法比较粗略，只是显示当前登录用户的个人微博状态而已。
现在我们要对该方法进行完善，加入关注人的微博动态数据。

app/Models/User.php

<?php

namespace App\Models;
.
.
.

use Auth;

class User extends Authenticatable
{
    .
    .
    .
    public function feed()
    {
        $user_ids = Auth::user()->followings->pluck('id')->toArray();
        array_push($user_ids, Auth::user()->id);
        return Status::whereIn('user_id', $user_ids)
                              ->with('user')
                              ->orderBy('created_at', 'desc');
    }
    .
    .
    .
}
上面的方法做了以下几个事情：

通过 followings 方法取出所有关注用户的信息，再借助 pluck 方法将 id 进行分离并赋值给 user_ids；
将当前用户的 id 加入到 user_ids 数组中；
使用 Laravel 提供的 查询构造器 whereIn 方法取出所有用户的微博动态并进行倒序排序；
我们使用了 Eloquent 关联的 预加载 with 方法，预加载避免了 N+1 查找的问题，
大大提高了查询效率。N+1 问题 的例子可以阅读此文档 Eloquent 模型关系预加载 。
这里需要注意的是 Auth::user()->followings 的用法。
我们在 User 模型里定义了关联方法 followings()，关联关系定义好后，
我们就可以通过访问 followings 属性直接获取到关注用户的 集合。
这是 Laravel Eloquent 提供的「动态属性」属性功能，我们可以像在访问模型中定义的属性一样，来访问所有的关联方法。

还有一点需要注意的是 $user->followings 与 $user->followings() 调用时返回的数据是不一样的， 
$user->followings 返回的是 Eloquent：集合 。而 $user->followings() 返回的是 数据库请求构建器 ，followings() 的情况下，你需要使用：

$user->followings()->get()
或者 ：

$user->followings()->paginate()
方法才能获取到最终数据。可以简单理解为 followings 返回的是数据集合，而 followings() 返回的是数据库查询语句。如果使用 get() 方法的话：

$user->followings == $user->followings()->get() // 等于 true
