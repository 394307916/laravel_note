文档：https://laravel-china.org/docs/laravel/5.5/eloquent-relationships
----------------------------------------------------------------------------------------------------------------------------------
基本模型
首先我们要先为微博创建一个数据表来储存微博数据，一条简单的微博至少需要拥有微博内容（content）和微博发布者（user_id）的信息。
接下来让我们创建一个新的迁移文件来创建微博数据表。

$ php artisan make:migration create_statuses_table --create="statuses"
这里我们把微博的表名设为 statuses，意为『动态』。

打开新创建的微博迁移文件并加入以下内容。

database/migrations/[timestamp]_create_statuses_table.php

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateStatusesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('statuses', function (Blueprint $table) {
            $table->increments('id');
            $table->text('content');
            $table->integer('user_id')->index();
            $table->index(['created_at']);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('statuses');
    }
}
接下来让我们对新增的几个重要字段进行详细讲解。

第一个字段为 text 类型的 content 字段，将用于储存微博的内容。

$table->text('content');
第二个字段为 integer 类型的 user_id 字段，用于储存微博发布者的个人 id，后面我们会借助 user_id 来查找指定用户发布过的所有微博，
因此为了提高查询效率，这里我们需要为该字段加上索引。

$table->integer('user_id')->index();
第三个则是为微博的创建时间添加索引，由于 timestamps 方法会为微博数据表生成一个微博创建时间字段 created_at 和一个微博更新时间字段 updated_at，
因此在这里我们并不需要再手动创建。为微博的创建时间添加索引的目的是，后面我们会根据微博的创建时间进行倒序输出，
并在页面上进行显示，使新建的微博能够排在比较靠前的位置。

$table->index(['created_at']);
在我们定义好迁移文件之后，运行以下命令来执行迁移。

$ php artisan migrate
接着，我们还需要创建微博模型来跟数据库进行交互，创建的命令很简单。但请记住，
所有我们新建的模型文件都要统一放置在 app/Models 文件夹下，为此我们在创建一个新的模型对象时，需要在模型名称前面加上 Models 目录。

$ php artisan make:model Models/Status
用户和微博之间的关联
前面我们讲过，在创建微博的时候，该微博必须拥有一个发布者，而该发布者可以拥有多条微博，则便是 数据模型关联 中经常谈到的一对多关系。

如果没有一对多的关系，我们需要这样来创建一条微博。

App\Models\Status::create()
当我们将用户模型与微博模型进行一对多关联之后，我们得到了以下方法。

$user->statuses()->create()
这样在微博进行创建时便会自动关联与微博用户之间的关系，非常方便。

Eloquent 模型让关联的管理和处理变得更加简单，同时也支持以下几种类型的关联：

一对一
一对多
多对多
远层一对多
多态关联
多态多对多关联
我们先从「一对多」来学习模型对应关系，下一章在构建用户粉丝关系的时候，我们会学习到「多对多」关联。
我们可在模型中将 Eloquent 关联定义为函数，如下，我们可在微博模型中，指明一条微博属于一个用户。

app/Models/Status.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Status extends Model
{
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
在用户模型中，指明一个用户拥有多条微博。

app/Models/User.php

<?php

namespace App\Models;
.
.
.
class User extends Authenticatable
{
    .
    .
    .
    public function statuses()
    {
        return $this->hasMany(Status::class);
    }    
}
需要注意的一点是，由于一个用户拥有多条微博，因此在用户模型中我们使用了微博动态的复数形式 statuses 来作为定义的函数名。
---------------------------------------------------------------------------------------------------------------------------------
显示微博
本节我们将为用户个人页面添加微博展示列表，用于显示该用户发布过的所有微博动态。

获取微博
首先我们需要在用户控制器的 show 动作中取出该用户发布过的所有微博。由于我们之前进行了模型关联，因此取出一个用户的所有微博可以通过以下方式：

$statuses = $user->statuses();
在我们将用户的所有微博取出之后，还需要根据微博的创建时间 created_at 对微博进行排序，
让新创建的微博靠前显示。我们使用 Eloquent 模型提供的 orderBy 方法，通过指定字段名和排序方式来对微博进行排序。

$statuses = $user->statuses()->orderBy('created_at', 'desc');
desc 是英文 descending 的简写，意为倒序，也就是数字大的排靠前。

最后，由于用户的微博发布数量可能会非常多，因此我们对取出的微博数据进行分页，在每个页面最多只显示 30 条微博：

$statuses = $user->statuses()->orderBy('created_at', 'desc')->paginate(30);
现在，相信你已经知道如何为用户控制器的 show 动作添加微博动态的读取逻辑了。不过我们还是需要来看下具体实现代码。

app/Http/Controllers/UsersController.php

<?php

namespace App\Http\Controllers;
.
.
.
class UsersController extends Controller
{
    .
    .
    .
    public function show(User $user)
    {
        $statuses = $user->statuses()
                           ->orderBy('created_at', 'desc')
                           ->paginate(30);
        return view('users.show', compact('user', 'statuses'));
    }
    .
    .
    .
}
compact 方法可以同时接收多个参数，在上面代码我们将用户数据 $user 和微博动态数据 $statuses 同时传递给用户个人页面的视图上。

渲染微博
接下来我们来构建单条微博的局部视图，该局部视图最终将应用在用户的个人页面上。

微博的局部视图包含一条微博动态的发布者，发布内容以及发布日期等信息。其基本页面结构如下：

resources/views/statuses/_status.blade.php

<li id="status-{{ $status->id }}">
  <a href="{{ route('users.show', $user->id )}}">
    <img src="{{ $user->gravatar() }}" alt="{{ $user->name }}" class="gravatar"/>
  </a>
  <span class="user">
    <a href="{{ route('users.show', $user->id )}}">{{ $user->name }}</a>
  </span>
  <span class="timestamp">
    {{ $status->created_at->diffForHumans() }}
  </span>
  <span class="content">{{ $status->content }}</span>
</li>
$status 实例代表的是单条微博的数据，$user 实例代表的是该微博发布者的数据。另外你可能还会注意到下面这个方法：

$status->created_at->diffForHumans()
该方法的作用是将日期进行友好化处理，我们可以使用 tinker 来查看该方法的具体输出情况。

$ php artisan tinker
在 tinker 中输出第一位用户的创建时间如下。

>>> $created_at = App\Models\User::first()->created_at
=> Carbon\Carbon {#704
     +"date": "1998-12-06 03:15:31.000000",
     +"timezone_type": 3,
     +"timezone": "UTC",
   }
在 tinker 中调用 diffForHumans 方法来输出，结果如下。

>>> $created_at->diffForHumans()
=> "17 years ago"
我们发现 diffForHumans 为我们生成的时间是英文的，如果要使用中文时间，则需要对 Carbon 进行本地化设置
。Carbon 是 PHP DateTime 的一个简单扩展，Laravel 将其默认集成到了框架中。对 Carbon 进行本地化的设置很简单，
只在 AppServiceProvider 中调用 Carbon 的 setLocale 方法即可，AppServiceProvider 是框架的核心，在 Laravel 启动时，会最先加载该文件。

app/Providers/AppServiceProvider.php

<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Carbon\Carbon;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Carbon::setLocale('zh');
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}
现在，让我们重启 tinker：

$ php artisan tinker
可以看到输出的日期将变成中文。

>>> $created_at = App\Models\User::first()->created_at
>>> $created_at->diffForHumans()
=> "17年前"
现在，我们可以在用户的个人页面使用该局部视图和渲染微博的分页链接了。

resources/views/users/show.blade.php

@extends('layouts.default')
@section('title', $user->name)
@section('content')
<div class="row">
  <div class="col-md-offset-2 col-md-8">
    <div class="col-md-12">
      <div class="col-md-offset-2 col-md-8">
        <section class="user_info">
          @include('shared._user_info', ['user' => $user])
        </section>
      </div>
    </div>
    <div class="col-md-12">
      @if (count($statuses) > 0)
        <ol class="statuses">
          @foreach ($statuses as $status)
            @include('statuses._status')
          @endforeach
        </ol>
        {!! $statuses->render() !!}
      @endif
    </div>
  </div>
</div>
@stop
在个人页面视图中，我们使用了 count($statuses) 方法来判断当前页面是否存在微博动态，如果不存在则不对微博的局部视图和分页链接进行渲染。
现在视图已经构建完成，让我们针对用户微博的显示进行样式优化。
---------------------------------------------------------------------------------------------------------------------------------
$ php artisan make:migration create_followers_table --create="followers"

并在该迁移文件中增加两个字段 user_id 和 follower_id 用于接下来的操作。

database/migrations/[timestamp]_create_followers_table.php

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateFollowersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('followers', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('user_id')->index();
            $table->integer('follower_id')->index();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('followers');
    }
}


在用户关注功能中，一个用户（粉丝）能够关注多个人，而被关注者能够拥有多个粉丝，
像这种关系我们称之为「多对多关系」。在 Laravel 中我们使用 belongsToMany 来关联模型之间的多对多关系。
以粉丝为例，一个用户能够拥有多个粉丝，因此我们在用户模型中可以像这样定义：

public function followers()
{
    return $this->belongsToMany(User::Class);
}
在 Laravel 中会默认将两个关联模型的名称进行合并并按照字母排序，
因此我们生成的关联关系表名称会是 followers_user。我们也可以自定义生成的名称，把关联表名改为 followers。

public function followers()
{
    return $this->belongsToMany(User::Class, 'followers');
}

除了自定义合并数据表的名称，我们也可以通过传递额外参数至 belongsToMany 方法来自定义数据表里的字段名称。如下：

public function followers()
{
    return $this->belongsToMany(User::Class, 'followers', 'user_id', 'follower_id');
}

belongsToMany 方法的第三个参数 user_id 是定义在关联中的模型外键名，而第四个参数 follower_id 则是要合并的模型外键名。

因此，最终我们在用户模型中定义的关联如下：

app/Models/User.php

<?php

namespace App\Models;
.
.
.
class User extends Authenticatable
{
    .
    .
    .
    public function followers()
    {
        return $this->belongsToMany(User::Class, 'followers', 'user_id', 'follower_id');
    }

    public function followings()
    {
        return $this->belongsToMany(User::Class, 'followers', 'follower_id', 'user_id');
    }
}  

我们可以通过 followers 来获取粉丝关系列表，如：

$user->followers();

通过 followings 来获取用户关注人列表，如：

$user->followings();

app/Models/User.php

<?php

namespace App\Models;
.
.
.
class User extends Authenticatable
{
    .
    .
    .
    public function follow($user_ids)
    {
        if (!is_array($user_ids)) {
            $user_ids = compact('user_ids');
        }
        $this->followings()->sync($user_ids, false);
    }

    public function unfollow($user_ids)
    {
        if (!is_array($user_ids)) {
            $user_ids = compact('user_ids');
        }
        $this->followings()->detach($user_ids);
    }
    
    public function isFollowing($user_id)
    {
        return $this->followings->contains($user_id);
    }
    
}    
